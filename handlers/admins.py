from aiogram import Router, types, F
from aiogram.filters import Command
from config import is_admin
from keyboards.admins import (
    get_admin_menu,
    get_admin_stats_menu,
    get_admin_users_menu,
    get_admin_test_menu
)
from utils.admin_stats import AdminStatsService
from utils.admin_users import AdminUsersService
from utils.admin_protocols import AdminProtocolsService
from utils.admin_system import AdminSystemService


router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
async def admin_filter(message: types.Message | types.CallbackQuery) -> bool:
    user_id = message.from_user.id
    return is_admin(user_id)


# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.message(Command("admin"), admin_filter)
async def admin_handler(message: types.Message):
    keyboard = get_admin_menu()
    await message.answer("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@router.callback_query(F.data == "admin_panel", admin_filter)
async def admin_panel_handler(callback: types.CallbackQuery):
    keyboard = get_admin_menu()
    await callback.message.edit_text("üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
    await callback.answer()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats", admin_filter)
async def admin_stats_handler(callback: types.CallbackQuery):
    stats = await AdminStatsService.get_basic_stats()
    text = await AdminStatsService.format_basic_stats(stats)

    keyboard = get_admin_stats_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats_detailed", admin_filter)
async def admin_stats_detailed_handler(callback: types.CallbackQuery):
    stats = await AdminStatsService.get_detailed_stats()
    text = await AdminStatsService.format_detailed_stats(stats)

    keyboard = get_admin_stats_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data == "admin_users", admin_filter)
async def admin_users_handler(callback: types.CallbackQuery):
    text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:"

    keyboard = get_admin_users_menu(page=1)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("admin_users_list_"), admin_filter)
async def admin_users_list_handler(callback: types.CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page_str = callback.data.replace("admin_users_list_", "")
    try:
        page = int(page_str)
    except ValueError:
        page = 1

    users_data = await AdminUsersService.get_users_list(page=page)
    text = await AdminUsersService.format_users_list(users_data)

    keyboard = get_admin_users_menu(page=page)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
@router.callback_query(F.data == "admin_test", admin_filter)
async def admin_test_handler(callback: types.CallbackQuery):
    text = (
        "üîß **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤**\n\n"
        "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤:\n"
        "–ë—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

    keyboard = get_admin_test_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –¢–µ—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ (–æ–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä)
@router.callback_query(F.data.startswith("admin_test_"), admin_filter)
async def admin_test_protocol_handler(callback: types.CallbackQuery):
    protocol = callback.data.replace("admin_test_", "")
    user_id = str(callback.from_user.id)

    test_result = await AdminProtocolsService.test_protocol(protocol, user_id)
    text = await AdminProtocolsService.format_test_result(test_result)

    keyboard = get_admin_test_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "admin_settings", admin_filter)
async def admin_settings_handler(callback: types.CallbackQuery):
    settings = await AdminSystemService.get_system_settings()
    text = await AdminSystemService.format_system_settings(settings)

    keyboard = get_admin_menu()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
@router.message(Command("admin"))
async def admin_not_allowed(message: types.Message):
    await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")


@router.callback_query(F.data.startswith("admin_"))
async def admin_not_allowed_callback(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
