from aiogram import Router, types
from aiogram.filters import Command
from proxy_clients import vless, vmess, shadowsocks, trojan
from utils.qr_code import create_qr_code
from keyboards.users import (
    get_main_menu,
    get_services_menu,
    get_protocol_menu,
    get_qr_menu,
    get_instructions_menu,
    get_back_instructions,
    get_back_button
)

router = Router()


# –ë–õ–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
# –°—Ç–∞—Ä—Ç - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = get_main_menu()
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)


# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(lambda c: c.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    keyboard = get_main_menu()
    await callback.message.edit_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback.answer()


# –ë–õ–û–ö –£–°–õ–£–ì
@router.callback_query(lambda c: c.data == "services")
async def services_handler(callback: types.CallbackQuery):
    keyboard = get_services_menu()
    await callback.message.edit_text("üõí –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    await callback.answer()


# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
@router.callback_query(lambda c: c.data.startswith("connect_"))
async def protocol_menu_handler(callback: types.CallbackQuery):
    protocol = callback.data.replace("connect_", "")

    text = (
        f"üîê **{protocol.upper()} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ**\n\n"
        f"–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É\n"
        f"–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = get_protocol_menu(protocol)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("get_string_"))
async def get_string_handler(callback: types.CallbackQuery):
    protocol = callback.data.replace("get_string_", "")
    user_id = str(callback.from_user.id)

    try:
        if protocol == "vless":
            result = await vless.create_vless_client(user_id)
        elif protocol == "vmess":
            result = await vmess.create_vmess_client(user_id)
        elif protocol == "shadowsocks":
            result = await shadowsocks.create_ss_client(user_id)
        elif protocol == "trojan":
            result = await trojan.create_trojan_client(user_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
            return

        connection_string = result["connection_string"]

        text = (
            f"üîê **–í–∞—à {protocol.upper()} –∫–æ–Ω—Ñ–∏–≥**\n\n"
            f"**–î–µ–π—Å—Ç–≤—É–µ—Ç:** {result['expiry_time']} –¥–Ω–µ–π\n\n"
            f"```\n{connection_string}\n```\n\n"
            f"‚ö†Ô∏è *–í—ã–¥–µ–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ*\n"
        )

        await callback.message.edit_text(text, reply_markup=get_protocol_menu(protocol), parse_mode="Markdown")
        await callback.answer("‚úÖ –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∞")

    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞",
            reply_markup=get_protocol_menu(protocol)
        )
        print(f"Get string error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


# –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥
@router.callback_query(lambda c: c.data.startswith("get_qr_"))
async def get_qr_handler(callback: types.CallbackQuery):
    protocol = callback.data.replace("get_qr_", "")
    user_id = str(callback.from_user.id)

    try:
        if protocol == "vless":
            result = await vless.create_vless_client(user_id)
        elif protocol == "vmess":
            result = await vmess.create_vmess_client(user_id)
        elif protocol == "shadowsocks":
            result = await shadowsocks.create_ss_client(user_id)
        elif protocol == "trojan":
            result = await trojan.create_trojan_client(user_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
            return

        connection_string = result["connection_string"]
        qr_code = await create_qr_code(connection_string)

        # ‚úÖ –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=qr_code,
                caption=(
                    f"üì± **QR-–∫–æ–¥ {protocol.upper()}**\n\n"
                    f"**–î–µ–π—Å—Ç–≤—É–µ—Ç:** {result['expiry_time']} –¥–Ω–µ–π\n\n"
                    f"‚ö†Ô∏è *–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*"
                ),
                parse_mode="Markdown"
            ),
            reply_markup=get_qr_menu(protocol)
        )

        await callback.answer("‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞", show_alert=True)
        print(f"Get QR error: {e}")


# –ë–õ–û–ö –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô
@router.callback_query(lambda c: c.data == "referral")
async def referral_handler(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referral_link = f"https://t.me/your_bot_username?start=ref{user_id}"

    text = (
        "üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"**–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
        f"```\n{referral_link}\n```\n\n"
        f"‚ö†Ô∏è *–í—ã–¥–µ–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ*\n"
        f"*–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤*"
    )

    keyboard = get_back_button()
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –ë–õ–û–ö –ò–ù–°–¢–†–£–ö–¶–ò–ô
@router.callback_query(lambda c: c.data == "instructions")
async def instructions_handler(callback: types.CallbackQuery):
    keyboard = get_instructions_menu()
    await callback.message.edit_text("üìò –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:", reply_markup=keyboard)
    await callback.answer()


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
@router.callback_query(lambda c: c.data == "instruction_vless")
async def instruction_vless_handler(callback: types.CallbackQuery):
    text = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ VLESS:\n\n"
        "Windows: –°–∫–∞—á–∞–π—Ç–µ V2RayN\n"
        "Android: –°–∫–∞—á–∞–π—Ç–µ V2RayNG\n"  
        "iOS: –°–∫–∞—á–∞–π—Ç–µ Shadowrocket\n"
        "macOS: –°–∫–∞—á–∞–π—Ç–µ V2RayX"
    )
    await callback.message.edit_text(text, reply_markup=get_back_instructions())
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_vmess")
async def instruction_vmess_handler(callback: types.CallbackQuery):
    text = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ VMess:\n\n"
        "Windows: –°–∫–∞—á–∞–π—Ç–µ V2RayN\n"
        "Android: –°–∫–∞—á–∞–π—Ç–µ V2RayNG\n"
        "iOS: –°–∫–∞—á–∞–π—Ç–µ Shadowrocket\n"
        "macOS: –°–∫–∞—á–∞–π—Ç–µ V2RayX"
    )
    await callback.message.edit_text(text, reply_markup=get_back_instructions())
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_shadowsocks")
async def instruction_shadowsocks_handler(callback: types.CallbackQuery):
    text = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Shadowsocks:\n\n"
        "Windows: –°–∫–∞—á–∞–π—Ç–µ Shadowsocks\n"
        "Android: –°–∫–∞—á–∞–π—Ç–µ Shadowsocks\n"
        "iOS: –°–∫–∞—á–∞–π—Ç–µ Shadowrocket\n"
        "macOS: –°–∫–∞—á–∞–π—Ç–µ ShadowsocksX"
    )
    await callback.message.edit_text(text, reply_markup=get_back_instructions())
    await callback.answer()


@router.callback_query(lambda c: c.data == "instruction_trojan")
async def instruction_trojan_handler(callback: types.CallbackQuery):
    text = (
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Trojan:\n\n"
        "Windows: –°–∫–∞—á–∞–π—Ç–µ Trojan-Qt5\n"
        "Android: –°–∫–∞—á–∞–π—Ç–µ Igniter\n"
        "iOS: –°–∫–∞—á–∞–π—Ç–µ Shadowrocket\n"
        "macOS: –°–∫–∞—á–∞–π—Ç–µ TrojanX"
    )
    await callback.message.edit_text(text, reply_markup=get_back_instructions())
    await callback.answer()


# –ë–õ–û–ö –û –°–ï–†–í–ò–°–ï
@router.callback_query(lambda c: c.data == "about")
async def about_handler(callback: types.CallbackQuery):
    text = (
        "‚ÑπÔ∏è –û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—É—Å–ª—É–≥–∏ "
        "—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @support"
    )
    await callback.message.edit_text(text, reply_markup=get_back_button())
    await callback.answer()
